#!/bin/bash

# Pipe-Pop Management Script
# This script provides a convenient wrapper around the pipe-pop binary

# Installation directory
INSTALL_DIR="/opt/pipe-pop"
# Main PipeNetwork directory
PIPE_DIR="/home/karo/Workspace/PipeNetwork"
# Get the directory where the script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored messages
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to get version from VERSION file
get_version() {
    if [ -f "${SCRIPT_DIR}/VERSION" ]; then
        cat "${SCRIPT_DIR}/VERSION"
    else
        echo "Unknown"
    fi
}

# Function to get node pulse (used by interactive and continuous modes)
get_node_pulse() {
    local mode="$1"
    
    # Clear screen
    clear
    
    # Get node status
    NODE_STATUS=$(${PIPE_DIR}/bin/pipe-pop --status 2>/dev/null)
    if [ $? -ne 0 ]; then
        echo "Error: Failed to get node status. Check if pipe-pop is running."
        return 1
    fi
    
    # Extract key metrics
    UPTIME=$(echo "$NODE_STATUS" | grep -i "uptime" | head -n 1 | sed 's/^[[:space:]]*//')
    REPUTATION=$(echo "$NODE_STATUS" | grep -i "reputation" | head -n 1 | sed 's/^[[:space:]]*//')
    POINTS=$(echo "$NODE_STATUS" | grep -i "points" | head -n 1 | sed 's/^[[:space:]]*//')
    EGRESS=$(echo "$NODE_STATUS" | grep -i "egress" | head -n 1 | sed 's/^[[:space:]]*//')
    
    # Extract reputation components
    UPTIME_SCORE=$(echo "$NODE_STATUS" | grep -i "uptime score" | head -n 1 | sed 's/^[[:space:]]*//')
    HISTORICAL_SCORE=$(echo "$NODE_STATUS" | grep -i "historical score" | head -n 1 | sed 's/^[[:space:]]*//')
    EGRESS_SCORE=$(echo "$NODE_STATUS" | grep -i "egress score" | head -n 1 | sed 's/^[[:space:]]*//')
    
    # Extract referral information
    REFERRAL_COUNT=$(echo "$NODE_STATUS" | grep -i "referral count" | head -n 1 | sed 's/^[[:space:]]*//')
    REFERRAL_POINTS=$(echo "$NODE_STATUS" | grep -i "referral points" | head -n 1 | sed 's/^[[:space:]]*//')
    
    # Get node ID
    NODE_ID=$(cat ${PIPE_DIR}/cache/node_info.json 2>/dev/null | grep -o '"node_id": "[^"]*' | cut -d'"' -f4)
    if [ -z "$NODE_ID" ]; then
        NODE_ID="Unknown"
    fi
    
    # Get process info
    PID=$(pgrep -f "pipe-pop" | head -n 1)
    if [ -n "$PID" ]; then
        CPU=$(ps -p $PID -o %cpu | tail -n 1 | tr -d ' ')
        MEM=$(ps -p $PID -o %mem | tail -n 1 | tr -d ' ')
        RUNTIME=$(ps -p $PID -o etime | tail -n 1 | tr -d ' ')
        START_TIME=$(ps -p $PID -o lstart= 2>/dev/null || echo "unknown")
        
        # Format runtime to be more readable
        FORMATTED_RUNTIME=""
        if [[ "$RUNTIME" == *-* ]]; then
            # Contains days
            DAYS=$(echo "$RUNTIME" | cut -d'-' -f1)
            REST=$(echo "$RUNTIME" | cut -d'-' -f2)
            FORMATTED_RUNTIME="${DAYS} days, ${REST}"
        else
            FORMATTED_RUNTIME="$RUNTIME"
        fi
        
        STATUS="Running (PID: $PID)"
    else
        CPU="N/A"
        MEM="N/A"
        RUNTIME="N/A"
        FORMATTED_RUNTIME="N/A"
        START_TIME="N/A"
        STATUS="Not Running"
    fi
    
    # Check if ports are listening
    PORT_80=$(netstat -tuln 2>/dev/null | grep -q ":80 " && echo "✓" || echo "✗")
    PORT_443=$(netstat -tuln 2>/dev/null | grep -q ":443 " && echo "✓" || echo "✗")
    PORT_8003=$(netstat -tuln 2>/dev/null | grep -q ":8003 " && echo "✓" || echo "✗")
    
    # Get current timestamp
    TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")
    
    # Extract reputation value for color coding
    REP_VALUE=$(echo "$REPUTATION" | grep -o '[0-9]\+\.[0-9]\+' | head -n 1)
    if [ -n "$REP_VALUE" ]; then
        if (( $(echo "$REP_VALUE >= 0.9" | bc -l) )); then
            REP_COLOR="\033[1;32m" # Bright Green for excellent
        elif (( $(echo "$REP_VALUE >= 0.8" | bc -l) )); then
            REP_COLOR="\033[0;32m" # Green for good
        elif (( $(echo "$REP_VALUE >= 0.7" | bc -l) )); then
            REP_COLOR="\033[0;33m" # Yellow for fair
        else
            REP_COLOR="\033[0;31m" # Red for needs improvement
        fi
        REP_RESET="\033[0m"
    else
        REP_COLOR=""
        REP_RESET=""
    fi
    
    # Display pulse information
    echo -e "\033[1;36m╔═══════════════════════════════════════════════════════════════════╗\033[0m"
    echo -e "\033[1;36m║                      PIPE NETWORK POP NODE PULSE                  ║\033[0m"
    echo -e "\033[1;36m╠═══════════════════════════════════════════════════════════════════╣\033[0m"
    echo -e "\033[1;36m║\033[0m Time: $TIMESTAMP"
    echo -e "\033[1;36m║\033[0m Node ID: $NODE_ID"
    echo -e "\033[1;36m╠═══════════════════════════════════════════════════════════════════╣\033[0m"
    echo -e "\033[1;36m║\033[0m \033[1mSTATUS\033[0m"
    echo -e "\033[1;36m║\033[0m Status:     $STATUS"
    echo -e "\033[1;36m║\033[0m Uptime:     \033[1m$FORMATTED_RUNTIME\033[0m"
    echo -e "\033[1;36m║\033[0m Started:    $START_TIME"
    echo -e "\033[1;36m║\033[0m CPU Usage:  $CPU%"
    echo -e "\033[1;36m║\033[0m Mem Usage:  $MEM%"
    echo -e "\033[1;36m║\033[0m Ports:      80: $PORT_80  |  443: $PORT_443  |  8003: $PORT_8003"
    echo -e "\033[1;36m╠═══════════════════════════════════════════════════════════════════╣\033[0m"
    echo -e "\033[1;36m║\033[0m \033[1mREPUTATION BREAKDOWN\033[0m"
    if [ -n "$REP_VALUE" ]; then
        echo -e "\033[1;36m║\033[0m Overall:     ${REP_COLOR}$REPUTATION${REP_RESET}"
    else
        echo -e "\033[1;36m║\033[0m Overall:     $REPUTATION"
    fi
    
    if [ -n "$UPTIME_SCORE" ]; then
        echo -e "\033[1;36m║\033[0m $UPTIME_SCORE (40% weight)"
    fi
    if [ -n "$HISTORICAL_SCORE" ]; then
        echo -e "\033[1;36m║\033[0m $HISTORICAL_SCORE (30% weight)"
    fi
    if [ -n "$EGRESS_SCORE" ]; then
        echo -e "\033[1;36m║\033[0m $EGRESS_SCORE (30% weight)"
    fi
    echo -e "\033[1;36m╠═══════════════════════════════════════════════════════════════════╣\033[0m"
    echo -e "\033[1;36m║\033[0m \033[1mPERFORMANCE METRICS\033[0m"
    echo -e "\033[1;36m║\033[0m $UPTIME"
    echo -e "\033[1;36m║\033[0m $POINTS"
    echo -e "\033[1;36m║\033[0m $EGRESS"
    echo -e "\033[1;36m╠═══════════════════════════════════════════════════════════════════╣\033[0m"
    echo -e "\033[1;36m║\033[0m \033[1mREFERRAL STATISTICS\033[0m"
    if [ -n "$REFERRAL_COUNT" ]; then
        echo -e "\033[1;36m║\033[0m $REFERRAL_COUNT"
    fi
    if [ -n "$REFERRAL_POINTS" ]; then
        echo -e "\033[1;36m║\033[0m $REFERRAL_POINTS"
    fi
    if [ -z "$REFERRAL_COUNT" ] && [ -z "$REFERRAL_POINTS" ]; then
        echo -e "\033[1;36m║\033[0m No referral data available"
    fi
    echo -e "\033[1;36m╚═══════════════════════════════════════════════════════════════════╝\033[0m"
    echo ""
    
    if [ "$mode" = "continuous" ]; then
        echo "Press Ctrl+C to quit."
    else
        echo "Press any key to quit."
        # Wait for a keypress in interactive mode
        if [ "$mode" = "interactive" ]; then
            read -n 1 -s
        fi
    fi
}

# Check if the binary exists
if [ ! -f "${PIPE_DIR}/bin/pipe-pop" ]; then
    print_error "pipe-pop binary not found. Please check your installation."
    exit 1
fi

# Function to show help
show_help() {
    echo "Pipe Network PoP Node Management Script"
    echo "Usage: ./pop [OPTION]"
    echo ""
    echo "Options:"
    echo "  --status                Check node status and reputation"
    echo "  --version               Show the version of the pipe-pop binary"
    echo "  --refresh               Check for upgrades and refresh token"
    echo "  --gen-referral-route    Generate a referral code"
    echo "  --points                Check points and rewards"
    echo "  --stats                 Fetch node's uptime stats"
    echo "  --egress-test           Perform a quick egress test"
    echo "  --check-update          Check for updates to the pipe-pop binary"
    echo "  --update                Update the pipe-pop binary to the latest version"
    echo "  --enable-80-443         Enable ports 80 and 443 (requires restart)"
    echo "  --wallet-info           Display the current wallet address connected to the node"
    echo "  --set-wallet <address>  Set a new wallet address for the node"
    echo "  --monitor               Monitor node status"
    echo "  --pulse [-i|-c]         Show pulse monitoring (node status)"
    echo "                           -i: Interactive mode (press any key to exit)"
    echo "                           -c: Continuous mode (Ctrl+C to exit)"
    echo "  --leaderboard [OPTION]  Show network leaderboard"
    echo "                           reputation: Sort by reputation (default)"
    echo "                           points: Sort by points"
    echo "                           egress: Sort by egress data"
    echo "  --history               Run the history visualization tool"
    echo "  --dashboard [OPTION]    Show comprehensive dashboard"
    echo "                           --refresh N: Refresh every N seconds"
    echo "                           --compact: Show compact view"
    echo "                           --export HTML: Export to HTML file"
    echo "  --backup                Create a backup"
    echo "  --restart               Restart the node service"
    echo "  --logs                  View service logs"
    echo "  --help                  Show this help message"
    echo ""
    echo "Examples:"
    echo "  ./pop --status            Check node status"
    echo "  ./pop --check-update      Check for updates"
    echo "  ./pop --update            Update to the latest version"
    echo "  ./pop --wallet-info       Display current wallet address"
    echo "  ./pop --pulse            Show pulse monitoring in standard mode"
    echo "  ./pop --pulse -i         Show pulse monitoring in interactive mode"
    echo "  ./pop --pulse -c         Show pulse monitoring in continuous mode"
    echo "  ./pop --leaderboard      Show network leaderboard sorted by reputation"
    echo "  ./pop --history          Run the history visualization tool"
    echo "  ./pop --dashboard        Show comprehensive dashboard"
    echo "  ./pop --set-wallet H6sA2GwmppUTWHW7NAhw66NBDi9Bh7LvmGTJ6CUQU5e8  Set a new wallet address"
}

# Main execution
case "$1" in
    --status)
        print_message "Checking node status..."
        ${PIPE_DIR}/bin/pipe-pop --status
        ;;
    --version|-V)
        VERSION=$(get_version)
        echo -e "${BLUE}🌐 Pipe Network PoP Node Management Tools${NC}"
        echo -e "${BLUE}Version:${NC} v${VERSION}"
        echo -e "${BLUE}Branch:${NC} $(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "Unknown")"
        echo -e "${BLUE}Commit:${NC} $(git rev-parse --short HEAD 2>/dev/null || echo "Unknown")"
        echo -e "${BLUE}Date:${NC} $(git log -1 --format=%cd --date=short 2>/dev/null || echo "Unknown")"
        ;;
    --refresh)
        print_message "Checking for upgrades and refreshing token..."
        if [ "$EUID" -ne 0 ]; then
            print_error "This command must be run as root (with sudo)"
            exit 1
        fi
        ${PIPE_DIR}/bin/pipe-pop --refresh
        ;;
    --gen-referral-route)
        print_message "Generating referral code..."
        ${PIPE_DIR}/bin/pipe-pop --gen-referral-route
        ;;
    --points)
        print_message "Checking points and rewards..."
        ${PIPE_DIR}/bin/pipe-pop --points
        ;;
    --stats)
        print_message "Fetching uptime stats..."
        ${PIPE_DIR}/bin/pipe-pop --stats
        ;;
    --egress-test)
        print_message "Performing egress test..."
        ${PIPE_DIR}/bin/pipe-pop --egress-test
        ;;
    --check-update)
        print_message "Checking for updates to the pipe-pop binary..."
        cd ${PIPE_DIR}
        ./check_updates.sh
        ;;
    --update)
        print_message "Updating the pipe-pop binary..."
        if [ "$EUID" -ne 0 ]; then
            print_error "This command must be run as root (with sudo)"
            exit 1
        fi
        cd ${PIPE_DIR}
        ./update_binary.sh
        ;;
    --leaderboard)
        print_message "Fetching network leaderboard..."
        
        # Check if required tools are installed
        if ! command -v jq &> /dev/null; then
            print_error "The 'jq' command is required but not installed."
            print_message "Installing jq..."
            if [ "$EUID" -ne 0 ]; then
                print_error "This command requires root to install dependencies."
                print_message "Please run: sudo apt-get install jq"
                exit 1
            fi
            apt-get update && apt-get install -y jq
        fi
        
        if ! command -v curl &> /dev/null; then
            print_error "The 'curl' command is required but not installed."
            print_message "Installing curl..."
            if [ "$EUID" -ne 0 ]; then
                print_error "This command requires root to install dependencies."
                print_message "Please run: sudo apt-get install curl"
                exit 1
            fi
            apt-get update && apt-get install -y curl
        fi
        
        # Determine sort criteria
        SORT_BY="reputation"
        if [ "$2" == "--points" ]; then
            SORT_BY="points"
            print_message "Sorting by points..."
        elif [ "$2" == "--egress" ]; then
            SORT_BY="egress"
            print_message "Sorting by egress data..."
        else
            print_message "Sorting by reputation (default)..."
        fi
        
        # Get our node ID for highlighting
        OUR_NODE_ID=$(cat ${PIPE_DIR}/cache/node_info.json 2>/dev/null | grep -o '"node_id": "[^"]*' | cut -d'"' -f4)
        if [ -z "$OUR_NODE_ID" ]; then
            print_warning "Could not determine node ID. Your node will not be highlighted in the leaderboard."
        else
            print_message "Found node ID: $OUR_NODE_ID"
        fi
        
        # Fetch leaderboard data
        print_message "Fetching data from Pipe Network API..."
        TEMP_FILE=$(mktemp)
        
        # Ensure cleanup on exit or error
        trap 'rm -f "$TEMP_FILE"; exit 0' EXIT INT TERM
        
        # Fetch data from API with timeout and retry
        MAX_RETRIES=3
        RETRY_COUNT=0
        SUCCESS=false
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" != "true" ]; do
            if [ $RETRY_COUNT -gt 0 ]; then
                print_message "Retry attempt $RETRY_COUNT of $MAX_RETRIES..."
                sleep 2
            fi
            
            # Use a 10-second timeout for the curl request
            curl -s -m 10 "https://api.pipe.network/v1/nodes/leaderboard?sort=${SORT_BY}&limit=12" > "$TEMP_FILE" 2>/dev/null
            
            if [ $? -eq 0 ] && [ -s "$TEMP_FILE" ] && grep -q "nodes" "$TEMP_FILE"; then
                SUCCESS=true
            else
                RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
        done
        
        if [ "$SUCCESS" != "true" ]; then
            print_error "Failed to fetch leaderboard data after $MAX_RETRIES attempts."
            print_message "Troubleshooting steps:"
            print_message "1. Check your internet connection"
            print_message "2. Verify that api.pipe.network is accessible"
            print_message "3. Try again later as the service might be temporarily unavailable"
            
            # Test connection to the API endpoint
            print_message "Testing connection to api.pipe.network..."
            if ping -c 1 api.pipe.network &>/dev/null; then
                print_message "Connection to api.pipe.network is working."
                print_message "The API service might be temporarily unavailable or has changed."
            else
                print_error "Cannot connect to api.pipe.network. Check your network connection."
            fi
            
            exit 1
        fi
        
        # Process and display leaderboard in a compact format
        echo -e "\033[1;36m╔════════════════════════════════════════════════════════════════════════════╗\033[0m"
        echo -e "\033[1;36m║                        PIPE NETWORK NODE LEADERBOARD                       ║\033[0m"
        echo -e "\033[1;36m╠════════════════════════════════════════════════════════════════════════════╣\033[0m"
        echo -e "\033[1;36m║\033[0m Rank  Node ID                       Reputation    Points    Egress    \033[1;36m║\033[0m"
        echo -e "\033[1;36m╠════════════════════════════════════════════════════════════════════════════╣\033[0m"
        
        # Parse JSON and display results
        jq -r '.nodes[] | "\(.rank) \(.node_id) \(.reputation) \(.points) \(.egress)"' "$TEMP_FILE" | 
        while read -r rank node_id reputation points egress; do
            # Truncate node_id to fit in the compact display (first 25 chars)
            short_node_id="${node_id:0:25}"
            
            # Format the output
            printf -v formatted_line "%-5s %-28s %-13s %-9s %-10s" "$rank" "$short_node_id" "$reputation" "$points" "$egress"
            
            # Highlight our node
            if [ "$node_id" == "$OUR_NODE_ID" ]; then
                echo -e "\033[1;36m║\033[0m \033[1;32m$formatted_line\033[0m \033[1;36m║\033[0m"
            else
                echo -e "\033[1;36m║\033[0m $formatted_line \033[1;36m║\033[0m"
            fi
        done
        
        echo -e "\033[1;36m╠════════════════════════════════════════════════════════════════════════════╣\033[0m"
        
        # Show our node's position if not in top 12
        if [ -n "$OUR_NODE_ID" ]; then
            OUR_RANK=$(jq -r --arg nodeid "$OUR_NODE_ID" '.nodes[] | select(.node_id == $nodeid) | .rank' "$TEMP_FILE")
            
            if [ -z "$OUR_RANK" ]; then
                # Our node is not in the top 12, fetch its specific data
                print_message "Fetching your node's position..."
                
                # Use a 10-second timeout for the curl request with retry
                MAX_RETRIES=3
                RETRY_COUNT=0
                SUCCESS=false
                
                while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" != "true" ]; do
                    if [ $RETRY_COUNT -gt 0 ]; then
                        print_message "Retry attempt $RETRY_COUNT of $MAX_RETRIES..."
                        sleep 2
                    fi
                    
                    curl -s -m 10 "https://api.pipe.network/v1/nodes/${OUR_NODE_ID}" > "$TEMP_FILE" 2>/dev/null
                    
                    if [ $? -eq 0 ] && [ -s "$TEMP_FILE" ] && ! grep -q "error" "$TEMP_FILE"; then
                        SUCCESS=true
                    else
                        RETRY_COUNT=$((RETRY_COUNT + 1))
                    fi
                done
                
                if [ "$SUCCESS" == "true" ]; then
                    OUR_RANK=$(jq -r '.rank' "$TEMP_FILE")
                    OUR_REP=$(jq -r '.reputation' "$TEMP_FILE")
                    OUR_POINTS=$(jq -r '.points' "$TEMP_FILE")
                    OUR_EGRESS=$(jq -r '.egress' "$TEMP_FILE")
                    
                    # Truncate node_id to fit in the compact display
                    short_node_id="${OUR_NODE_ID:0:25}"
                    
                    echo -e "\033[1;36m║\033[0m Your Node:                                                              \033[1;36m║\033[0m"
                    printf -v our_line "%-5s %-28s %-13s %-9s %-10s" "$OUR_RANK" "$short_node_id" "$OUR_REP" "$OUR_POINTS" "$OUR_EGRESS"
                    echo -e "\033[1;36m║\033[0m \033[1;32m$our_line\033[0m \033[1;36m║\033[0m"
                else
                    echo -e "\033[1;36m║\033[0m Your node (${OUR_NODE_ID:0:25}...) is not in the leaderboard yet.      \033[1;36m║\033[0m"
                fi
            fi
        fi
        
        echo -e "\033[1;36m╚════════════════════════════════════════════════════════════════════════════╝\033[0m"
        echo ""
        echo "Leaderboard data is updated hourly. Run this command again to see the latest rankings."
        echo "Use --leaderboard --points or --leaderboard --egress to sort by different metrics."
        
        # Save historical data for future visualization
        HISTORY_DIR="${PIPE_DIR}/history"
        mkdir -p "$HISTORY_DIR"
        
        # Save today's leaderboard data with timestamp
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        cp "$TEMP_FILE" "${HISTORY_DIR}/leaderboard_${SORT_BY}_${TIMESTAMP}.json"
        
        # Keep only the last 30 days of history
        find "${HISTORY_DIR}" -name "leaderboard_*.json" -type f -mtime +30 -delete
        
        # Clean up
        rm -f "$TEMP_FILE"
        ;;
    --wallet-info)
        print_message "Checking wallet information..."
        CONFIG_FILE="${PIPE_DIR}/config/config.json"
        START_SCRIPT="${PIPE_DIR}/start_pipe_pop.sh"
        
        if [ -f "$CONFIG_FILE" ]; then
            WALLET_FROM_CONFIG=$(grep -o '"solana_wallet"[[:space:]]*:[[:space:]]*"[^"]*"' "$CONFIG_FILE" | cut -d'"' -f4)
            print_message "Wallet address from config.json: ${WALLET_FROM_CONFIG}"
        else
            print_warning "config.json not found."
        fi
        
        if [ -f "$START_SCRIPT" ]; then
            WALLET_FROM_SCRIPT=$(grep -o 'PUBKEY="[^"]*"' "$START_SCRIPT" | cut -d'"' -f2)
            print_message "Wallet address from start_pipe_pop.sh: ${WALLET_FROM_SCRIPT}"
        else
            print_warning "start_pipe_pop.sh not found."
        fi
        
        # Check if the node is running with a wallet
        if pgrep -f "pipe-pop" > /dev/null; then
            RUNNING_COMMAND=$(ps -ef | grep pipe-pop | grep -v grep)
            if echo "$RUNNING_COMMAND" | grep -q -- "--pubKey"; then
                RUNNING_WALLET=$(echo "$RUNNING_COMMAND" | grep -o -- "--pubKey [^ ]*" | cut -d' ' -f2)
                print_message "Wallet address used by running node: ${RUNNING_WALLET}"
            else
                print_warning "Running node does not have an explicit wallet address in command line."
            fi
        else
            print_warning "pipe-pop is not currently running."
            echo "To start it, run: sudo systemctl start pipe-pop.service"
        fi
        ;;
    --set-wallet)
        if [ "$EUID" -ne 0 ]; then
            print_error "This command must be run as root (with sudo)"
            exit 1
        fi
        
        if [ -z "$2" ]; then
            print_error "No wallet address provided. Usage: pop --set-wallet <address>"
            exit 1
        fi
        
        NEW_WALLET="$2"
        print_message "Setting wallet address to: ${NEW_WALLET}"
        
        # Update config.json
        CONFIG_FILE="${PIPE_DIR}/config/config.json"
        if [ -f "$CONFIG_FILE" ]; then
            # Create a backup of the config file
            cp "$CONFIG_FILE" "${CONFIG_FILE}.bak"
            print_message "Created backup of config.json at ${CONFIG_FILE}.bak"
            
            # Update the wallet address in config.json
            sed -i "s/\"solana_wallet\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"solana_wallet\": \"${NEW_WALLET}\"/g" "$CONFIG_FILE"
            print_message "Updated wallet address in config.json"
        else
            print_warning "config.json not found. Creating a new one..."
            mkdir -p "${PIPE_DIR}/config"
            cat > "$CONFIG_FILE" << EOF
{
  "solana_wallet": "${NEW_WALLET}",
  "cache_dir": "${PIPE_DIR}/cache",
  "log_level": "info",
  "network": {
    "ports": [80, 443, 8003],
    "hostname": "auto"
  }
}
EOF
            print_message "Created new config.json with the provided wallet address"
        fi
        
        # Update start_pipe_pop.sh
        START_SCRIPT="${PIPE_DIR}/start_pipe_pop.sh"
        if [ -f "$START_SCRIPT" ]; then
            # Create a backup of the start script
            cp "$START_SCRIPT" "${START_SCRIPT}.bak"
            print_message "Created backup of start_pipe_pop.sh at ${START_SCRIPT}.bak"
            
            # Update the wallet address in start_pipe_pop.sh
            sed -i "s/PUBKEY=\"[^\"]*\"/PUBKEY=\"${NEW_WALLET}\"/g" "$START_SCRIPT"
            print_message "Updated wallet address in start_pipe_pop.sh"
        else
            print_warning "start_pipe_pop.sh not found. Cannot update."
        fi
        
        # Restart the service to apply changes
        print_message "Restarting pipe-pop service to apply changes..."
        sudo systemctl restart pipe-pop.service
        
        print_message "Wallet address has been updated to: ${NEW_WALLET}"
        print_message "The service has been restarted with the new wallet address."
        ;;
    --enable-80-443)
        print_message "Enabling ports 80 and 443..."
        if [ "$EUID" -ne 0 ]; then
            print_error "This command must be run as root (with sudo)"
            exit 1
        fi
        
        # Check if the service file already has the flag
        if grep -q -- "--enable-80-443" /etc/systemd/system/pipe-pop.service; then
            print_message "Ports 80 and 443 are already enabled in the service configuration."
        else
            # Update the service file to include the --enable-80-443 flag
            sed -i 's|ExecStart=.*pipe-pop|& --enable-80-443|' /etc/systemd/system/pipe-pop.service
            
            # Reload systemd and restart the service
            systemctl daemon-reload
            systemctl restart pipe-pop.service
            
            print_message "Ports 80 and 443 have been enabled. The service has been restarted."
        fi
        
        # Check if the ports are now in use
        sleep 5
        if netstat -tuln | grep -q ":80 "; then
            print_message "Port 80 is now active and listening."
        else
            print_warning "Port 80 does not appear to be listening. Please check the service logs."
        fi
        
        if netstat -tuln | grep -q ":443 "; then
            print_message "Port 443 is now active and listening."
        else
            print_warning "Port 443 does not appear to be listening. Please check the service logs."
        fi
        ;;
    --monitor)
        print_message "Monitoring node status..."
        ${PIPE_DIR}/monitor.sh
        ;;
    --pulse)
        # Check for mode options
        if [ "$2" = "-i" ] || [ "$2" = "--interactive" ]; then
            get_node_pulse "interactive"
        elif [ "$2" = "-c" ] || [ "$2" = "--continuous" ]; then
            get_node_pulse "continuous"
        else
            get_node_pulse "standard"
        fi
        ;;
    --history)
        print_message "Running history visualization tool..."
        ${PIPE_DIR}/history_view.sh
        ;;
    --dashboard)
        print_message "Launching dashboard..."
        shift
        ${PIPE_DIR}/dashboard.sh "$@"
        ;;
    --backup)
        print_message "Creating backup..."
        ${PIPE_DIR}/backup.sh
        ;;
    --restart)
        print_message "Restarting node service..."
        if [ "$EUID" -ne 0 ]; then
            print_error "This command must be run as root (with sudo)"
            exit 1
        fi
        sudo systemctl restart pipe-pop.service
        print_message "Service restarted."
        ;;
    --logs)
        print_message "Viewing service logs..."
        journalctl -u pipe-pop.service -n 50
        ;;
    --help|-h|*)
        show_help
        ;;
esac

exit 0 