#!/bin/bash

# Pipe PoP Node Management Script
# This script provides a convenient wrapper around the pipe-pop binary

# Installation directory
INSTALL_DIR="/opt/pipe-pop"
# Main PipeNetwork directory
PIPE_DIR="/home/karo/Workspace/PipeNetwork"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to print colored messages
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if the binary exists
if [ ! -f "${PIPE_DIR}/bin/pipe-pop" ]; then
    print_error "Pipe PoP binary not found. Please check your installation."
    exit 1
fi

# Function to show help
show_help() {
    echo "Pipe PoP Node Management Script"
    echo "Usage: pop [OPTION]"
    echo ""
    echo "Options:"
    echo "  --status                Check node status and reputation"
    echo "  --version               Show the version of the Pipe PoP binary"
    echo "  --refresh               Check for upgrades and refresh token"
    echo "  --gen-referral-route    Generate a referral code"
    echo "  --points                Check points and rewards"
    echo "  --stats                 Fetch node's uptime stats"
    echo "  --egress-test           Perform a quick egress test"
    echo "  --check-update          Check for updates to the Pipe PoP binary"
    echo "  --update                Update the Pipe PoP binary to the latest version"
    echo "  --enable-80-443         Enable ports 80 and 443 (requires restart)"
    echo "  --wallet-info           Display the current wallet address connected to the node"
    echo "  --set-wallet <address>  Set a new wallet address for the node"
    echo "  --monitor               Monitor node status"
    echo "  --backup                Create a backup"
    echo "  --restart               Restart the node service"
    echo "  --logs                  View service logs"
    echo "  --help                  Show this help message"
    echo ""
    echo "Examples:"
    echo "  pop --status            Check node status"
    echo "  pop --check-update      Check for updates"
    echo "  pop --update            Update to the latest version"
    echo "  pop --wallet-info       Display current wallet address"
    echo "  pop --set-wallet H6sA2GwmppUTWHW7NAhw66NBDi9Bh7LvmGTJ6CUQU5e8  Set a new wallet address"
}

# Main execution
case "$1" in
    --status)
        print_message "Checking node status..."
        ${PIPE_DIR}/bin/pipe-pop --status
        ;;
    --version|-V)
        print_message "Checking version..."
        ${PIPE_DIR}/bin/pipe-pop --version
        ;;
    --refresh)
        print_message "Checking for upgrades and refreshing token..."
        if [ "$EUID" -ne 0 ]; then
            print_error "This command must be run as root (with sudo)"
            exit 1
        fi
        ${PIPE_DIR}/bin/pipe-pop --refresh
        ;;
    --gen-referral-route)
        print_message "Generating referral code..."
        ${PIPE_DIR}/bin/pipe-pop --gen-referral-route
        ;;
    --points)
        print_message "Checking points and rewards..."
        ${PIPE_DIR}/bin/pipe-pop --points
        ;;
    --stats)
        print_message "Fetching uptime stats..."
        ${PIPE_DIR}/bin/pipe-pop --stats
        ;;
    --egress-test)
        print_message "Performing egress test..."
        ${PIPE_DIR}/bin/pipe-pop --egress-test
        ;;
    --check-update)
        print_message "Checking for updates to the Pipe PoP binary..."
        cd ${PIPE_DIR}
        ./check_updates.sh
        ;;
    --update)
        print_message "Updating the Pipe PoP binary..."
        if [ "$EUID" -ne 0 ]; then
            print_error "This command must be run as root (with sudo)"
            exit 1
        fi
        cd ${PIPE_DIR}
        ./update_binary.sh
        ;;
    --wallet-info)
        print_message "Checking wallet information..."
        CONFIG_FILE="${PIPE_DIR}/config/config.json"
        START_SCRIPT="${PIPE_DIR}/start_pipe_pop.sh"
        
        if [ -f "$CONFIG_FILE" ]; then
            WALLET_FROM_CONFIG=$(grep -o '"solana_wallet"[[:space:]]*:[[:space:]]*"[^"]*"' "$CONFIG_FILE" | cut -d'"' -f4)
            print_message "Wallet address from config.json: ${WALLET_FROM_CONFIG}"
        else
            print_warning "config.json not found."
        fi
        
        if [ -f "$START_SCRIPT" ]; then
            WALLET_FROM_SCRIPT=$(grep -o 'PUBKEY="[^"]*"' "$START_SCRIPT" | cut -d'"' -f2)
            print_message "Wallet address from start_pipe_pop.sh: ${WALLET_FROM_SCRIPT}"
        else
            print_warning "start_pipe_pop.sh not found."
        fi
        
        # Check if the node is running with a wallet
        if pgrep -f "pipe-pop" > /dev/null; then
            RUNNING_COMMAND=$(ps -ef | grep pipe-pop | grep -v grep)
            if echo "$RUNNING_COMMAND" | grep -q -- "--pubKey"; then
                RUNNING_WALLET=$(echo "$RUNNING_COMMAND" | grep -o -- "--pubKey [^ ]*" | cut -d' ' -f2)
                print_message "Wallet address used by running node: ${RUNNING_WALLET}"
            else
                print_warning "Running node does not have an explicit wallet address in command line."
            fi
        else
            print_warning "Pipe PoP node is not currently running."
        fi
        ;;
    --set-wallet)
        if [ "$EUID" -ne 0 ]; then
            print_error "This command must be run as root (with sudo)"
            exit 1
        fi
        
        if [ -z "$2" ]; then
            print_error "No wallet address provided. Usage: pop --set-wallet <address>"
            exit 1
        fi
        
        NEW_WALLET="$2"
        print_message "Setting wallet address to: ${NEW_WALLET}"
        
        # Update config.json
        CONFIG_FILE="${PIPE_DIR}/config/config.json"
        if [ -f "$CONFIG_FILE" ]; then
            # Create a backup of the config file
            cp "$CONFIG_FILE" "${CONFIG_FILE}.bak"
            print_message "Created backup of config.json at ${CONFIG_FILE}.bak"
            
            # Update the wallet address in config.json
            sed -i "s/\"solana_wallet\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"solana_wallet\": \"${NEW_WALLET}\"/g" "$CONFIG_FILE"
            print_message "Updated wallet address in config.json"
        else
            print_warning "config.json not found. Creating a new one..."
            mkdir -p "${PIPE_DIR}/config"
            cat > "$CONFIG_FILE" << EOF
{
  "solana_wallet": "${NEW_WALLET}",
  "cache_dir": "${PIPE_DIR}/cache",
  "log_level": "info",
  "network": {
    "ports": [80, 443, 8003],
    "hostname": "auto"
  }
}
EOF
            print_message "Created new config.json with the provided wallet address"
        fi
        
        # Update start_pipe_pop.sh
        START_SCRIPT="${PIPE_DIR}/start_pipe_pop.sh"
        if [ -f "$START_SCRIPT" ]; then
            # Create a backup of the start script
            cp "$START_SCRIPT" "${START_SCRIPT}.bak"
            print_message "Created backup of start_pipe_pop.sh at ${START_SCRIPT}.bak"
            
            # Update the wallet address in start_pipe_pop.sh
            sed -i "s/PUBKEY=\"[^\"]*\"/PUBKEY=\"${NEW_WALLET}\"/g" "$START_SCRIPT"
            print_message "Updated wallet address in start_pipe_pop.sh"
        else
            print_warning "start_pipe_pop.sh not found. Cannot update."
        fi
        
        # Restart the service to apply changes
        print_message "Restarting Pipe PoP service to apply changes..."
        systemctl restart pipe-pop.service
        
        print_message "Wallet address has been updated to: ${NEW_WALLET}"
        print_message "The service has been restarted with the new wallet address."
        ;;
    --enable-80-443)
        print_message "Enabling ports 80 and 443..."
        if [ "$EUID" -ne 0 ]; then
            print_error "This command must be run as root (with sudo)"
            exit 1
        fi
        
        # Check if the service file already has the flag
        if grep -q -- "--enable-80-443" /etc/systemd/system/pipe-pop.service; then
            print_message "Ports 80 and 443 are already enabled in the service configuration."
        else
            # Update the service file to include the --enable-80-443 flag
            sed -i 's|ExecStart=.*pipe-pop|& --enable-80-443|' /etc/systemd/system/pipe-pop.service
            
            # Reload systemd and restart the service
            systemctl daemon-reload
            systemctl restart pipe-pop.service
            
            print_message "Ports 80 and 443 have been enabled. The service has been restarted."
        fi
        
        # Check if the ports are now in use
        sleep 5
        if netstat -tuln | grep -q ":80 "; then
            print_message "Port 80 is now active and listening."
        else
            print_warning "Port 80 does not appear to be listening. Please check the service logs."
        fi
        
        if netstat -tuln | grep -q ":443 "; then
            print_message "Port 443 is now active and listening."
        else
            print_warning "Port 443 does not appear to be listening. Please check the service logs."
        fi
        ;;
    --monitor)
        print_message "Monitoring node status..."
        ${PIPE_DIR}/monitor.sh
        ;;
    --backup)
        print_message "Creating backup..."
        ${PIPE_DIR}/backup.sh
        ;;
    --restart)
        print_message "Restarting node service..."
        if [ "$EUID" -ne 0 ]; then
            print_error "This command must be run as root (with sudo)"
            exit 1
        fi
        sudo systemctl restart pipe-pop.service
        print_message "Service restarted."
        ;;
    --logs)
        print_message "Viewing service logs..."
        journalctl -u pipe-pop.service -n 50
        ;;
    --help|-h|*)
        show_help
        ;;
esac

exit 0 