#!/bin/bash

# Quick start script for Pipe PoP node
# Usage: sudo ./pop [options]
#   Options:
#     --status              Show node status and metrics
#     --points-route        Check points and rewards
#     --gen-referral-route  Generate a referral code
#     --check-update        Check if a new version is available
#     --update              Update to the latest version
#     (any other options will be passed to the pipe-pop binary)

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored messages
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_update() {
    echo -e "${BLUE}[UPDATE]${NC} $1"
}

# Check if the binary exists
if [ ! -f "bin/pipe-pop" ]; then
    print_error "Pipe PoP binary not found. Please run setup.sh first."
    exit 1
fi

# Function to get current version
get_current_version() {
    local version_output
    version_output=$(./bin/pipe-pop --version 2>&1)
    if [[ $version_output =~ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        echo "unknown"
    fi
}

# Function to check if a URL exists
url_exists() {
    curl --output /dev/null --silent --head --fail "$1"
    return $?
}

# Function to check for updates
check_for_updates() {
    print_message "Checking for updates..."
    
    local current_version=$(get_current_version)
    if [ "$current_version" == "unknown" ]; then
        print_error "Could not determine current version. Update check failed."
        return 1
    fi
    
    print_message "Current version: v$current_version"
    
    # Split version into components
    IFS='.' read -r major minor patch <<< "$current_version"
    
    # Check for patch updates (e.g., 0.2.8 -> 0.2.9)
    local new_patch=$((patch + 1))
    local patch_update_url="https://dl.pipecdn.app/v$major.$minor.$new_patch/pop"
    
    # Check for minor updates (e.g., 0.2.8 -> 0.3.0)
    local new_minor=$((minor + 1))
    local minor_update_url="https://dl.pipecdn.app/v$major.$new_minor.0/pop"
    
    # Check for major updates (e.g., 0.2.8 -> 1.0.0)
    local new_major=$((major + 1))
    local major_update_url="https://dl.pipecdn.app/v$new_major.0.0/pop"
    
    local found_update=false
    local latest_version=""
    local update_url=""
    
    # Check patch update
    if url_exists "$patch_update_url"; then
        found_update=true
        latest_version="$major.$minor.$new_patch"
        update_url="$patch_update_url"
    # Check minor update
    elif url_exists "$minor_update_url"; then
        found_update=true
        latest_version="$major.$new_minor.0"
        update_url="$minor_update_url"
    # Check major update
    elif url_exists "$major_update_url"; then
        found_update=true
        latest_version="$new_major.0.0"
        update_url="$major_update_url"
    fi
    
    if [ "$found_update" = true ]; then
        print_update "New version available: v$latest_version"
        print_update "Run 'sudo ./pop --update' to update to the latest version."
        echo "$update_url"
        return 0
    else
        print_message "You are running the latest version (v$current_version)."
        return 1
    fi
}

# Function to update the binary
update_binary() {
    print_message "Checking for updates before proceeding..."
    
    local update_url=$(check_for_updates)
    local update_status=$?
    
    if [ $update_status -ne 0 ]; then
        print_message "No updates available. Exiting."
        return 0
    fi
    
    print_update "Downloading and installing the latest version..."
    
    # Check if update_binary.sh exists
    if [ ! -f "update_binary.sh" ]; then
        print_error "update_binary.sh script not found. Cannot proceed with update."
        return 1
    fi
    
    # Make sure it's executable
    chmod +x update_binary.sh
    
    # Run the update script with the URL
    ./update_binary.sh "$update_url"
    local update_result=$?
    
    if [ $update_result -eq 0 ]; then
        print_update "Update completed successfully!"
        
        # Check if service is running and offer to restart
        if systemctl is-active --quiet pipe-pop.service; then
            print_message "The Pipe PoP service is running. Restarting to apply the update..."
            systemctl restart pipe-pop.service
            
            if systemctl is-active --quiet pipe-pop.service; then
                print_message "Service restarted successfully with the new version."
            else
                print_error "Failed to restart the service. Please restart it manually."
            fi
        else
            print_message "The Pipe PoP service is not running. No need to restart."
        fi
    else
        print_error "Update failed with exit code $update_result. Please check the logs."
        return 1
    fi
    
    return 0
}

# Create cache directory if it doesn't exist
mkdir -p cache

# Handle special commands that don't require root
if [ "$1" == "--status" ] || [ "$1" == "--points-route" ] || [ "$1" == "--gen-referral-route" ] || [ "$1" == "--check-update" ]; then
    if [ "$1" == "--check-update" ]; then
        check_for_updates
        exit $?
    else
        print_message "Running command: $1"
        ./bin/pipe-pop "$@"
        exit $?
    fi
fi

# For all other commands, require root
if [ "$EUID" -ne 0 ]; then
    print_error "This script must be run as root (with sudo) for node operation"
    print_message "For status checks, use: ./pop --status"
    print_message "For points checks, use: ./pop --points-route"
    print_message "For generating referral codes, use: ./pop --gen-referral-route"
    print_message "For update checks, use: ./pop --check-update"
    exit 1
fi

# Handle update command
if [ "$1" == "--update" ]; then
    update_binary
    exit $?
fi

# If no arguments are provided, start the node
if [ $# -eq 0 ]; then
    # Check if the service is already running
    if systemctl is-active --quiet pipe-pop.service; then
        print_message "Pipe PoP node is already running as a service."
        print_message "To check status: ./pop --status"
        print_message "To stop: sudo systemctl stop pipe-pop.service"
        print_message "To view logs: journalctl -u pipe-pop.service -f"
        exit 0
    fi

    # Check if the service is installed but not running
    if [ -f "/etc/systemd/system/pipe-pop.service" ]; then
        print_message "Pipe PoP service is installed but not running."
        print_message "Starting the service..."
        systemctl start pipe-pop.service
        
        if systemctl is-active --quiet pipe-pop.service; then
            print_message "Service started successfully."
            print_message "To check status: ./pop --status"
            print_message "To view logs: journalctl -u pipe-pop.service -f"
        else
            print_error "Failed to start the service. Starting in foreground mode instead."
            # Continue to foreground mode
        fi
        exit 0
    fi

    # If we get here, the service is not installed or couldn't be started
    print_message "Starting Pipe PoP node in foreground mode..."
    print_message "Press Ctrl+C to stop the node"
    print_message "For production use, consider installing as a service with: sudo ./install_service.sh all"

    # Run the node with the Solana wallet address if configured
    if [ -f "config/config.json" ]; then
        SOLANA_WALLET=$(grep -o '"solana_wallet"[^,}]*' config/config.json | cut -d'"' -f4)
        if [ -n "$SOLANA_WALLET" ]; then
            print_message "Using Solana wallet: $SOLANA_WALLET"
            ./bin/pipe-pop --cache-dir "$(pwd)/cache" --pubKey "$SOLANA_WALLET"
        else
            print_message "No Solana wallet found in config. Running with default settings."
            ./bin/pipe-pop --cache-dir "$(pwd)/cache"
        fi
    else
        print_message "No config file found. Running with default settings."
        ./bin/pipe-pop --cache-dir "$(pwd)/cache"
    fi
else
    # Pass all arguments to the pipe-pop binary
    print_message "Running Pipe PoP with arguments: $@"
    ./bin/pipe-pop "$@"
fi 