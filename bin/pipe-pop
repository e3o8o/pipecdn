#!/bin/bash

# Placeholder for the Pipe PoP binary
# This is a mock implementation for testing purposes

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to print colored messages
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Parse command line arguments
CACHE_DIR="./cache"
CONFIG_FILE=""

for arg in "$@"; do
    case $arg in
        --cache-dir=*)
            CACHE_DIR="${arg#*=}"
            shift
            ;;
        --cache-dir)
            CACHE_DIR="$2"
            shift
            shift
            ;;
        --config=*)
            CONFIG_FILE="${arg#*=}"
            shift
            ;;
        --config)
            CONFIG_FILE="$2"
            shift
            shift
            ;;
    esac
done

# Create cache directory if it doesn't exist
mkdir -p "$CACHE_DIR"

# Default values
SOLANA_WALLET=""
LOG_LEVEL="info"

# Read configuration if provided
if [ -n "$CONFIG_FILE" ] && [ -f "$CONFIG_FILE" ]; then
    print_message "Reading configuration from $CONFIG_FILE"
    
    # Extract Solana wallet address using grep and cut
    SOLANA_WALLET=$(grep -o '"solana_wallet": *"[^"]*"' "$CONFIG_FILE" | cut -d'"' -f4)
    
    # Extract log level
    LOG_LEVEL=$(grep -o '"log_level": *"[^"]*"' "$CONFIG_FILE" | cut -d'"' -f4)
    
    print_message "Solana wallet: $SOLANA_WALLET"
    print_message "Log level: $LOG_LEVEL"
else
    print_warning "No configuration file provided or file not found."
    print_warning "Using default values."
fi

# Create node_info.json if it doesn't exist
if [ ! -f "$CACHE_DIR/node_info.json" ]; then
    print_message "Creating node_info.json..."
    cat > "$CACHE_DIR/node_info.json" << EOF
{
    "node_id": "mock-node-$(date +%s)",
    "version": "0.1.0",
    "start_time": "$(date -Iseconds)",
    "status": "running",
    "solana_wallet": "$SOLANA_WALLET"
}
EOF
fi

print_message "Starting Pipe PoP node..."
print_message "Cache directory: $CACHE_DIR"
if [ -n "$SOLANA_WALLET" ]; then
    print_message "Using Solana wallet: $SOLANA_WALLET"
else
    print_warning "No Solana wallet configured. Rewards will not be collected."
fi
print_message "Press Ctrl+C to stop the node"

# Simulate node running
count=0
while true; do
    count=$((count + 1))
    print_message "Node running... (iteration $count)"
    print_message "Checking ports: 80, 443, 8003"
    print_message "Cache size: $(du -sh "$CACHE_DIR" | cut -f1)"
    
    # Update node_info.json
    cat > "$CACHE_DIR/node_info.json" << EOF
{
    "node_id": "mock-node-$(date +%s)",
    "version": "0.1.0",
    "start_time": "$(date -Iseconds)",
    "last_update": "$(date -Iseconds)",
    "status": "running",
    "iterations": $count,
    "solana_wallet": "$SOLANA_WALLET"
}
EOF
    
    sleep 10
done
